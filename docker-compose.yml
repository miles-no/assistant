version: '3.8'

services:
  postgres:
    image: postgres:16-alpine
    container_name: miles-assistant-db
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: miles_booking
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    container_name: miles-assistant-api
    restart: unless-stopped
    environment:
      DATABASE_URL: "postgresql://postgres:postgres@postgres:5432/miles_booking?schema=public"
      PORT: 3000
      NODE_ENV: production
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-this}
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
    # No volumes in production - everything is baked into the image

  chat-app:
    build:
      context: ./chat-app
      dockerfile: Dockerfile
    container_name: miles-assistant-chat
    restart: unless-stopped
    environment:
      PORT: 3001
      # Connect to host's Ollama (use host.docker.internal on Mac/Windows)
      OLLAMA_URL: ${OLLAMA_URL:-http://host.docker.internal:11434}
      OLLAMA_MODEL: ${OLLAMA_MODEL:-llama3.2}
      # Connect to API service
      MCP_API_URL: http://api:3000/api/mcp
    ports:
      - "3001:3001"
    depends_on:
      - api
    extra_hosts:
      - "host.docker.internal:host-gateway"

volumes:
  postgres_data:
    name: miles-assistant-postgres-data
