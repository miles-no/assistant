// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  MANAGER
  USER
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

enum FeedbackStatus {
  OPEN
  RESOLVED
  DISMISSED
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  bookings         Booking[]
  managedLocations ManagerLocation[]
  roomFeedback     RoomFeedback[]

  @@index([email])
  @@map("users")
}

model Location {
  id          String   @id @default(cuid())
  name        String
  address     String
  city        String
  country     String
  timezone    String   @default("UTC")
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  rooms    Room[]
  managers ManagerLocation[]

  @@index([city, country])
  @@map("locations")
}

model ManagerLocation {
  id         String   @id @default(cuid())
  userId     String
  locationId String
  createdAt  DateTime @default(now())

  // Relations
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  location Location @relation(fields: [locationId], references: [id], onDelete: Cascade)

  @@unique([userId, locationId])
  @@index([userId])
  @@index([locationId])
  @@map("manager_locations")
}

model Room {
  id          String   @id @default(cuid())
  name        String
  locationId  String
  capacity    Int
  description String?
  amenities   String[] // e.g., ["projector", "whiteboard", "video_conference"]
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  location     Location       @relation(fields: [locationId], references: [id], onDelete: Cascade)
  bookings     Booking[]
  roomFeedback RoomFeedback[]

  @@index([locationId])
  @@index([isActive])
  @@map("rooms")
}

model Booking {
  id          String        @id @default(cuid())
  roomId      String
  userId      String
  startTime   DateTime
  endTime     DateTime
  title       String
  description String?
  status      BookingStatus @default(CONFIRMED)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  room Room @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([roomId, startTime, endTime])
  @@index([userId])
  @@index([startTime, endTime])
  @@map("bookings")
}

model RoomFeedback {
  id        String         @id @default(cuid())
  roomId    String
  userId    String
  message   String
  status    FeedbackStatus @default(OPEN)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  // Relations
  room Room @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([roomId])
  @@index([userId])
  @@index([status])
  @@map("room_feedback")
}
