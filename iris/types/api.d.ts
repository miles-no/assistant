/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */
export interface paths {
    "/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Health check
         * @description Check if the API is running
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description API is healthy */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example ok */
                            status?: string;
                            /** Format: date-time */
                            timestamp?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Register a new user
         * @description Create a new user account. New users are assigned the USER role by default.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /**
                         * Format: email
                         * @example john.doe@miles.com
                         */
                        email: string;
                        /**
                         * Format: password
                         * @example securepassword123
                         */
                        password: string;
                        /** @example John */
                        firstName: string;
                        /** @example Doe */
                        lastName: string;
                    };
                };
            };
            responses: {
                /** @description User registered successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example User registered successfully */
                            message?: string;
                            user?: components["schemas"]["User"];
                            /** @example eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9... */
                            token?: string;
                        };
                    };
                };
                400: components["responses"]["ValidationError"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Login
         * @description Authenticate and receive a JWT token
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /**
                         * Format: email
                         * @example john.doe@miles.com
                         */
                        email: string;
                        /**
                         * Format: password
                         * @example password123
                         */
                        password: string;
                    };
                };
            };
            responses: {
                /** @description Login successful */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example Login successful */
                            message?: string;
                            user?: components["schemas"]["User"];
                            /** @example eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9... */
                            token?: string;
                        };
                    };
                };
                401: components["responses"]["Unauthorized"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get current user
         * @description Get the authenticated user's profile information
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description User profile */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            user?: components["schemas"]["User"] & {
                                managedLocations?: {
                                    id?: string;
                                    location?: components["schemas"]["Location"];
                                }[];
                            };
                        };
                    };
                };
                401: components["responses"]["Unauthorized"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/locations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all locations
         * @description Get a list of all office locations
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of locations */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            locations?: (components["schemas"]["Location"] & {
                                _count?: {
                                    rooms?: number;
                                };
                            })[];
                        };
                    };
                };
            };
        };
        put?: never;
        /**
         * Create a location
         * @description Create a new office location (Admin only)
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["LocationInput"];
                };
            };
            responses: {
                /** @description Location created successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            location?: components["schemas"]["Location"];
                        };
                    };
                };
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/locations/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get location by ID
         * @description Get details of a specific location including rooms and managers
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description Location ID
                     * @example sf-office
                     */
                    id: components["parameters"]["locationId"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Location details */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            location?: components["schemas"]["Location"] & {
                                rooms?: components["schemas"]["Room"][];
                                managers?: {
                                    user?: components["schemas"]["User"];
                                }[];
                            };
                        };
                    };
                };
                404: components["responses"]["NotFound"];
            };
        };
        put?: never;
        post?: never;
        /**
         * Delete location
         * @description Delete a location (Admin only)
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description Location ID
                     * @example sf-office
                     */
                    id: components["parameters"]["locationId"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Location deleted successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                        };
                    };
                };
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
            };
        };
        options?: never;
        head?: never;
        /**
         * Update location
         * @description Update a location (Admin or Manager of that location)
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description Location ID
                     * @example sf-office
                     */
                    id: components["parameters"]["locationId"];
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["LocationInput"];
                };
            };
            responses: {
                /** @description Location updated successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            location?: components["schemas"]["Location"];
                        };
                    };
                };
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
            };
        };
        trace?: never;
    };
    "/api/locations/{id}/managers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Assign manager to location
         * @description Assign a manager to a location (Admin only)
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description Location ID
                     * @example sf-office
                     */
                    id: components["parameters"]["locationId"];
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        userId: string;
                    };
                };
            };
            responses: {
                /** @description Manager assigned successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            managerLocation?: Record<string, never>;
                        };
                    };
                };
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/locations/{id}/managers/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Remove manager from location
         * @description Remove a manager from a location (Admin only)
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description Location ID
                     * @example sf-office
                     */
                    id: components["parameters"]["locationId"];
                    userId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Manager removed successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rooms": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all rooms
         * @description Get a list of all rooms, optionally filtered by location
         */
        get: {
            parameters: {
                query?: {
                    /** @description Filter rooms by location ID */
                    locationId?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of rooms */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            rooms?: (components["schemas"]["Room"] & {
                                location?: components["schemas"]["Location"];
                                _count?: {
                                    bookings?: number;
                                };
                            })[];
                        };
                    };
                };
            };
        };
        put?: never;
        /**
         * Create a room
         * @description Create a new room (Admin or Manager of that location)
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["RoomInput"];
                };
            };
            responses: {
                /** @description Room created successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            room?: components["schemas"]["Room"] & {
                                location?: components["schemas"]["Location"];
                            };
                        };
                    };
                };
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rooms/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get room by ID
         * @description Get details of a specific room
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description Room ID
                     * @example sf-golden-gate-conference-room
                     */
                    id: components["parameters"]["roomId"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Room details */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            room?: components["schemas"]["Room"] & {
                                location?: components["schemas"]["Location"];
                            };
                        };
                    };
                };
                404: components["responses"]["NotFound"];
            };
        };
        put?: never;
        post?: never;
        /**
         * Delete room
         * @description Delete a room (Admin or Manager of that location)
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description Room ID
                     * @example sf-golden-gate-conference-room
                     */
                    id: components["parameters"]["roomId"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Room deleted successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
            };
        };
        options?: never;
        head?: never;
        /**
         * Update room
         * @description Update a room (Admin or Manager of that location)
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description Room ID
                     * @example sf-golden-gate-conference-room
                     */
                    id: components["parameters"]["roomId"];
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        name?: string;
                        capacity?: number;
                        description?: string;
                        amenities?: string[];
                        isActive?: boolean;
                    };
                };
            };
            responses: {
                /** @description Room updated successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            room?: components["schemas"]["Room"];
                        };
                    };
                };
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
            };
        };
        trace?: never;
    };
    "/api/rooms/{id}/availability": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Check room availability
         * @description Get all bookings for a room within a date range
         */
        get: {
            parameters: {
                query: {
                    /** @example 2025-10-20T00:00:00Z */
                    startDate: string;
                    /** @example 2025-10-21T00:00:00Z */
                    endDate: string;
                };
                header?: never;
                path: {
                    /**
                     * @description Room ID
                     * @example sf-golden-gate-conference-room
                     */
                    id: components["parameters"]["roomId"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Room availability */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            bookings?: components["schemas"]["Booking"][];
                        };
                    };
                };
                400: components["responses"]["ValidationError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/bookings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List bookings
         * @description Get bookings filtered by user role:
         *     - **USER**: Only their own bookings
         *     - **MANAGER**: Bookings in their managed locations
         *     - **ADMIN**: All bookings
         */
        get: {
            parameters: {
                query?: {
                    /** @description Filter by room ID */
                    roomId?: string;
                    /** @description Filter by location ID */
                    locationId?: string;
                    /** @description Filter bookings starting after this date */
                    startDate?: string;
                    /** @description Filter bookings ending before this date */
                    endDate?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of bookings */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            bookings?: (components["schemas"]["Booking"] & {
                                room?: components["schemas"]["Room"] & {
                                    location?: components["schemas"]["Location"];
                                };
                                user?: components["schemas"]["User"];
                            })[];
                        };
                    };
                };
                401: components["responses"]["Unauthorized"];
            };
        };
        put?: never;
        /**
         * Create a booking
         * @description Create a new room booking
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["BookingInput"];
                };
            };
            responses: {
                /** @description Booking created successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            booking?: components["schemas"]["Booking"];
                        };
                    };
                };
                400: components["responses"]["ValidationError"];
                401: components["responses"]["Unauthorized"];
                /** @description Room not available for the selected time slot */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example Room is not available for the selected time slot */
                            error?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/bookings/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get booking by ID
         * @description Get details of a specific booking
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Booking ID */
                    id: components["parameters"]["bookingId"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Booking details */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            booking?: components["schemas"]["Booking"];
                        };
                    };
                };
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
            };
        };
        put?: never;
        post?: never;
        /**
         * Cancel booking
         * @description Cancel a booking (owner, manager of that location, or admin)
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Booking ID */
                    id: components["parameters"]["bookingId"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Booking cancelled successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example Booking cancelled successfully */
                            message?: string;
                        };
                    };
                };
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
            };
        };
        options?: never;
        head?: never;
        /**
         * Update booking
         * @description Update a booking (owner, manager of that location, or admin)
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Booking ID */
                    id: components["parameters"]["bookingId"];
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** Format: date-time */
                        startTime?: string;
                        /** Format: date-time */
                        endTime?: string;
                        title?: string;
                        description?: string;
                        /** @enum {string} */
                        status?: "PENDING" | "CONFIRMED" | "CANCELLED";
                    };
                };
            };
            responses: {
                /** @description Booking updated successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            booking?: components["schemas"]["Booking"];
                        };
                    };
                };
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                /** @description Room not available for the new time slot */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        trace?: never;
    };
    "/api/calendar/office/{id}.ics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get office calendar feed
         * @description Download iCal calendar feed for all bookings in an office
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description Location ID
                     * @example sf-office
                     */
                    id: components["parameters"]["locationId"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description iCal calendar feed */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/calendar": string;
                    };
                };
                401: components["responses"]["Unauthorized"];
                404: components["responses"]["NotFound"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/calendar/room/{id}.ics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get room calendar feed
         * @description Download iCal calendar feed for a specific room
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description Room ID
                     * @example sf-golden-gate-conference-room
                     */
                    id: components["parameters"]["roomId"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description iCal calendar feed */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/calendar": string;
                    };
                };
                401: components["responses"]["Unauthorized"];
                404: components["responses"]["NotFound"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/calendar/user/{userId}.ics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get user calendar feed
         * @description Download iCal calendar feed for a user's bookings
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    userId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description iCal calendar feed */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/calendar": string;
                    };
                };
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        User: {
            id?: string;
            /** Format: email */
            email?: string;
            firstName?: string;
            lastName?: string;
            /** @enum {string} */
            role?: "ADMIN" | "MANAGER" | "USER";
            /** Format: date-time */
            createdAt?: string;
        };
        Location: {
            id?: string;
            name?: string;
            address?: string;
            city?: string;
            country?: string;
            /** @example America/Los_Angeles */
            timezone?: string;
            description?: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
        };
        LocationInput: {
            /** @example Stavanger */
            name: string;
            /** @example Nytorget 8 */
            address: string;
            /** @example Stavanger */
            city: string;
            /** @example Norway */
            country: string;
            /**
             * @default UTC
             * @example Europe/Oslo
             */
            timezone: string;
            /** @example Miles Stavanger office */
            description?: string;
        };
        Room: {
            id?: string;
            name?: string;
            locationId?: string;
            capacity?: number;
            description?: string;
            /**
             * @example [
             *       "projector",
             *       "whiteboard",
             *       "video_conference"
             *     ]
             */
            amenities?: string[];
            isActive?: boolean;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
        };
        RoomInput: {
            /** @example Teamrommet */
            name: string;
            /** @example stavanger */
            locationId: string;
            /** @example 10 */
            capacity: number;
            /** @example Team collaboration room */
            description?: string;
            /**
             * @default []
             * @example [
             *       "projector",
             *       "whiteboard",
             *       "video_conference",
             *       "tv"
             *     ]
             */
            amenities: string[];
        };
        Booking: {
            id?: string;
            roomId?: string;
            userId?: string;
            /** Format: date-time */
            startTime?: string;
            /** Format: date-time */
            endTime?: string;
            title?: string;
            description?: string;
            /** @enum {string} */
            status?: "PENDING" | "CONFIRMED" | "CANCELLED";
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
        };
        BookingInput: {
            /** @example stavanger-skagen */
            roomId: string;
            /**
             * Format: date-time
             * @example 2025-10-20T14:00:00Z
             */
            startTime: string;
            /**
             * Format: date-time
             * @example 2025-10-20T15:30:00Z
             */
            endTime: string;
            /** @example Product Review Meeting */
            title: string;
            /** @example Monthly product review with stakeholders */
            description?: string;
        };
        Error: {
            error?: string;
        };
        ValidationError: {
            /** @example Validation error */
            error?: string;
            details?: {
                path?: string;
                message?: string;
            }[];
        };
    };
    responses: {
        /** @description Missing or invalid authentication */
        Unauthorized: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                /**
                 * @example {
                 *       "error": "Invalid or expired token"
                 *     }
                 */
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Insufficient permissions */
        Forbidden: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                /**
                 * @example {
                 *       "error": "Insufficient permissions"
                 *     }
                 */
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Resource not found */
        NotFound: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                /**
                 * @example {
                 *       "error": "Resource not found"
                 *     }
                 */
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Validation error */
        ValidationError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ValidationError"];
            };
        };
    };
    parameters: {
        /**
         * @description Location ID
         * @example sf-office
         */
        locationId: string;
        /**
         * @description Room ID
         * @example sf-golden-gate-conference-room
         */
        roomId: string;
        /** @description Booking ID */
        bookingId: string;
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
//# sourceMappingURL=api.d.ts.map