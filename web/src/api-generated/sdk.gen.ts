// This file is auto-generated by @hey-api/openapi-ts

import type { Client, Options as Options2, TDataShape } from "./client";
import { client } from "./client.gen";
import type {
	DeleteApiBookingsByIdData,
	DeleteApiBookingsByIdErrors,
	DeleteApiBookingsByIdResponses,
	DeleteApiLocationsByIdData,
	DeleteApiLocationsByIdErrors,
	DeleteApiLocationsByIdManagersByUserIdData,
	DeleteApiLocationsByIdManagersByUserIdErrors,
	DeleteApiLocationsByIdManagersByUserIdResponses,
	DeleteApiLocationsByIdResponses,
	DeleteApiRoomsByIdData,
	DeleteApiRoomsByIdErrors,
	DeleteApiRoomsByIdResponses,
	GetApiAuthMeData,
	GetApiAuthMeErrors,
	GetApiAuthMeResponses,
	GetApiBookingsByIdData,
	GetApiBookingsByIdErrors,
	GetApiBookingsByIdResponses,
	GetApiBookingsData,
	GetApiBookingsErrors,
	GetApiBookingsResponses,
	GetApiCalendarOfficeByLocationIdIcsData,
	GetApiCalendarOfficeByLocationIdIcsErrors,
	GetApiCalendarOfficeByLocationIdIcsResponses,
	GetApiCalendarRoomByRoomIdIcsData,
	GetApiCalendarRoomByRoomIdIcsErrors,
	GetApiCalendarRoomByRoomIdIcsResponses,
	GetApiCalendarUserByUserIdIcsData,
	GetApiCalendarUserByUserIdIcsErrors,
	GetApiCalendarUserByUserIdIcsResponses,
	GetApiLocationsByIdData,
	GetApiLocationsByIdErrors,
	GetApiLocationsByIdResponses,
	GetApiLocationsData,
	GetApiLocationsResponses,
	GetApiRoomsByIdAvailabilityData,
	GetApiRoomsByIdAvailabilityErrors,
	GetApiRoomsByIdAvailabilityResponses,
	GetApiRoomsByIdData,
	GetApiRoomsByIdErrors,
	GetApiRoomsByIdResponses,
	GetApiRoomsData,
	GetApiRoomsResponses,
	GetHealthData,
	GetHealthResponses,
	PatchApiBookingsByIdData,
	PatchApiBookingsByIdErrors,
	PatchApiBookingsByIdResponses,
	PatchApiLocationsByIdData,
	PatchApiLocationsByIdErrors,
	PatchApiLocationsByIdResponses,
	PatchApiRoomsByIdData,
	PatchApiRoomsByIdErrors,
	PatchApiRoomsByIdResponses,
	PostApiAuthLoginData,
	PostApiAuthLoginErrors,
	PostApiAuthLoginResponses,
	PostApiAuthRegisterData,
	PostApiAuthRegisterErrors,
	PostApiAuthRegisterResponses,
	PostApiBookingsData,
	PostApiBookingsErrors,
	PostApiBookingsResponses,
	PostApiLocationsByIdManagersData,
	PostApiLocationsByIdManagersErrors,
	PostApiLocationsByIdManagersResponses,
	PostApiLocationsData,
	PostApiLocationsErrors,
	PostApiLocationsResponses,
	PostApiRoomsData,
	PostApiRoomsErrors,
	PostApiRoomsResponses,
} from "./types.gen";

export type Options<
	TData extends TDataShape = TDataShape,
	ThrowOnError extends boolean = boolean,
> = Options2<TData, ThrowOnError> & {
	/**
	 * You can provide a client instance returned by `createClient()` instead of
	 * individual options. This might be also useful if you want to implement a
	 * custom client.
	 */
	client?: Client;
	/**
	 * You can pass arbitrary values through the `meta` object. This can be
	 * used to access values that aren't defined as part of the SDK function.
	 */
	meta?: Record<string, unknown>;
};

/**
 * Health check
 *
 * Check if the API is running
 */
export const getHealth = <ThrowOnError extends boolean = false>(
	options?: Options<GetHealthData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetHealthResponses,
		unknown,
		ThrowOnError
	>({
		url: "/health",
		...options,
	});
};

/**
 * Register a new user
 *
 * Create a new user account. New users are assigned the USER role by default.
 */
export const postApiAuthRegister = <ThrowOnError extends boolean = false>(
	options: Options<PostApiAuthRegisterData, ThrowOnError>,
) => {
	return (options.client ?? client).post<
		PostApiAuthRegisterResponses,
		PostApiAuthRegisterErrors,
		ThrowOnError
	>({
		url: "/api/auth/register",
		...options,
		headers: {
			"Content-Type": "application/json",
			...options.headers,
		},
	});
};

/**
 * Login
 *
 * Authenticate and receive a JWT token
 */
export const postApiAuthLogin = <ThrowOnError extends boolean = false>(
	options: Options<PostApiAuthLoginData, ThrowOnError>,
) => {
	return (options.client ?? client).post<
		PostApiAuthLoginResponses,
		PostApiAuthLoginErrors,
		ThrowOnError
	>({
		url: "/api/auth/login",
		...options,
		headers: {
			"Content-Type": "application/json",
			...options.headers,
		},
	});
};

/**
 * Get current user
 *
 * Get the authenticated user's profile information
 */
export const getApiAuthMe = <ThrowOnError extends boolean = false>(
	options?: Options<GetApiAuthMeData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetApiAuthMeResponses,
		GetApiAuthMeErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/api/auth/me",
		...options,
	});
};

/**
 * List all locations
 *
 * Get a list of all office locations
 */
export const getApiLocations = <ThrowOnError extends boolean = false>(
	options?: Options<GetApiLocationsData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetApiLocationsResponses,
		unknown,
		ThrowOnError
	>({
		url: "/api/locations",
		...options,
	});
};

/**
 * Create a location
 *
 * Create a new office location (Admin only)
 */
export const postApiLocations = <ThrowOnError extends boolean = false>(
	options: Options<PostApiLocationsData, ThrowOnError>,
) => {
	return (options.client ?? client).post<
		PostApiLocationsResponses,
		PostApiLocationsErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/api/locations",
		...options,
		headers: {
			"Content-Type": "application/json",
			...options.headers,
		},
	});
};

/**
 * Delete location
 *
 * Delete a location (Admin only)
 */
export const deleteApiLocationsById = <ThrowOnError extends boolean = false>(
	options: Options<DeleteApiLocationsByIdData, ThrowOnError>,
) => {
	return (options.client ?? client).delete<
		DeleteApiLocationsByIdResponses,
		DeleteApiLocationsByIdErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/api/locations/{id}",
		...options,
	});
};

/**
 * Get location by ID
 *
 * Get details of a specific location including rooms and managers
 */
export const getApiLocationsById = <ThrowOnError extends boolean = false>(
	options: Options<GetApiLocationsByIdData, ThrowOnError>,
) => {
	return (options.client ?? client).get<
		GetApiLocationsByIdResponses,
		GetApiLocationsByIdErrors,
		ThrowOnError
	>({
		url: "/api/locations/{id}",
		...options,
	});
};

/**
 * Update location
 *
 * Update a location (Admin or Manager of that location)
 */
export const patchApiLocationsById = <ThrowOnError extends boolean = false>(
	options: Options<PatchApiLocationsByIdData, ThrowOnError>,
) => {
	return (options.client ?? client).patch<
		PatchApiLocationsByIdResponses,
		PatchApiLocationsByIdErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/api/locations/{id}",
		...options,
		headers: {
			"Content-Type": "application/json",
			...options.headers,
		},
	});
};

/**
 * Assign manager to location
 *
 * Assign a manager to a location (Admin only)
 */
export const postApiLocationsByIdManagers = <
	ThrowOnError extends boolean = false,
>(
	options: Options<PostApiLocationsByIdManagersData, ThrowOnError>,
) => {
	return (options.client ?? client).post<
		PostApiLocationsByIdManagersResponses,
		PostApiLocationsByIdManagersErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/api/locations/{id}/managers",
		...options,
		headers: {
			"Content-Type": "application/json",
			...options.headers,
		},
	});
};

/**
 * Remove manager from location
 *
 * Remove a manager from a location (Admin only)
 */
export const deleteApiLocationsByIdManagersByUserId = <
	ThrowOnError extends boolean = false,
>(
	options: Options<DeleteApiLocationsByIdManagersByUserIdData, ThrowOnError>,
) => {
	return (options.client ?? client).delete<
		DeleteApiLocationsByIdManagersByUserIdResponses,
		DeleteApiLocationsByIdManagersByUserIdErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/api/locations/{id}/managers/{userId}",
		...options,
	});
};

/**
 * List all rooms
 *
 * Get a list of all rooms, optionally filtered by location
 */
export const getApiRooms = <ThrowOnError extends boolean = false>(
	options?: Options<GetApiRoomsData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetApiRoomsResponses,
		unknown,
		ThrowOnError
	>({
		url: "/api/rooms",
		...options,
	});
};

/**
 * Create a room
 *
 * Create a new room (Admin or Manager of that location)
 */
export const postApiRooms = <ThrowOnError extends boolean = false>(
	options: Options<PostApiRoomsData, ThrowOnError>,
) => {
	return (options.client ?? client).post<
		PostApiRoomsResponses,
		PostApiRoomsErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/api/rooms",
		...options,
		headers: {
			"Content-Type": "application/json",
			...options.headers,
		},
	});
};

/**
 * Delete room
 *
 * Delete a room (Admin or Manager of that location)
 */
export const deleteApiRoomsById = <ThrowOnError extends boolean = false>(
	options: Options<DeleteApiRoomsByIdData, ThrowOnError>,
) => {
	return (options.client ?? client).delete<
		DeleteApiRoomsByIdResponses,
		DeleteApiRoomsByIdErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/api/rooms/{id}",
		...options,
	});
};

/**
 * Get room by ID
 *
 * Get details of a specific room
 */
export const getApiRoomsById = <ThrowOnError extends boolean = false>(
	options: Options<GetApiRoomsByIdData, ThrowOnError>,
) => {
	return (options.client ?? client).get<
		GetApiRoomsByIdResponses,
		GetApiRoomsByIdErrors,
		ThrowOnError
	>({
		url: "/api/rooms/{id}",
		...options,
	});
};

/**
 * Update room
 *
 * Update a room (Admin or Manager of that location)
 */
export const patchApiRoomsById = <ThrowOnError extends boolean = false>(
	options: Options<PatchApiRoomsByIdData, ThrowOnError>,
) => {
	return (options.client ?? client).patch<
		PatchApiRoomsByIdResponses,
		PatchApiRoomsByIdErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/api/rooms/{id}",
		...options,
		headers: {
			"Content-Type": "application/json",
			...options.headers,
		},
	});
};

/**
 * Check room availability
 *
 * Get all bookings for a room within a date range
 */
export const getApiRoomsByIdAvailability = <
	ThrowOnError extends boolean = false,
>(
	options: Options<GetApiRoomsByIdAvailabilityData, ThrowOnError>,
) => {
	return (options.client ?? client).get<
		GetApiRoomsByIdAvailabilityResponses,
		GetApiRoomsByIdAvailabilityErrors,
		ThrowOnError
	>({
		url: "/api/rooms/{id}/availability",
		...options,
	});
};

/**
 * List bookings
 *
 * Get bookings filtered by user role:
 * - **USER**: Only their own bookings
 * - **MANAGER**: Bookings in their managed locations
 * - **ADMIN**: All bookings
 *
 */
export const getApiBookings = <ThrowOnError extends boolean = false>(
	options?: Options<GetApiBookingsData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetApiBookingsResponses,
		GetApiBookingsErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/api/bookings",
		...options,
	});
};

/**
 * Create a booking
 *
 * Create a new room booking
 */
export const postApiBookings = <ThrowOnError extends boolean = false>(
	options: Options<PostApiBookingsData, ThrowOnError>,
) => {
	return (options.client ?? client).post<
		PostApiBookingsResponses,
		PostApiBookingsErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/api/bookings",
		...options,
		headers: {
			"Content-Type": "application/json",
			...options.headers,
		},
	});
};

/**
 * Cancel booking
 *
 * Cancel a booking (owner, manager of that location, or admin)
 */
export const deleteApiBookingsById = <ThrowOnError extends boolean = false>(
	options: Options<DeleteApiBookingsByIdData, ThrowOnError>,
) => {
	return (options.client ?? client).delete<
		DeleteApiBookingsByIdResponses,
		DeleteApiBookingsByIdErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/api/bookings/{id}",
		...options,
	});
};

/**
 * Get booking by ID
 *
 * Get details of a specific booking
 */
export const getApiBookingsById = <ThrowOnError extends boolean = false>(
	options: Options<GetApiBookingsByIdData, ThrowOnError>,
) => {
	return (options.client ?? client).get<
		GetApiBookingsByIdResponses,
		GetApiBookingsByIdErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/api/bookings/{id}",
		...options,
	});
};

/**
 * Update booking
 *
 * Update a booking (owner, manager of that location, or admin)
 */
export const patchApiBookingsById = <ThrowOnError extends boolean = false>(
	options: Options<PatchApiBookingsByIdData, ThrowOnError>,
) => {
	return (options.client ?? client).patch<
		PatchApiBookingsByIdResponses,
		PatchApiBookingsByIdErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/api/bookings/{id}",
		...options,
		headers: {
			"Content-Type": "application/json",
			...options.headers,
		},
	});
};

/**
 * Get office calendar feed
 *
 * Download iCal calendar feed for all bookings in an office
 */
export const getApiCalendarOfficeByLocationIdIcs = <
	ThrowOnError extends boolean = false,
>(
	options: Options<GetApiCalendarOfficeByLocationIdIcsData, ThrowOnError>,
) => {
	return (options.client ?? client).get<
		GetApiCalendarOfficeByLocationIdIcsResponses,
		GetApiCalendarOfficeByLocationIdIcsErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/api/calendar/office/{locationId}.ics",
		...options,
	});
};

/**
 * Get room calendar feed
 *
 * Download iCal calendar feed for a specific room
 */
export const getApiCalendarRoomByRoomIdIcs = <
	ThrowOnError extends boolean = false,
>(
	options: Options<GetApiCalendarRoomByRoomIdIcsData, ThrowOnError>,
) => {
	return (options.client ?? client).get<
		GetApiCalendarRoomByRoomIdIcsResponses,
		GetApiCalendarRoomByRoomIdIcsErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/api/calendar/room/{roomId}.ics",
		...options,
	});
};

/**
 * Get user calendar feed
 *
 * Download iCal calendar feed for a user's bookings
 */
export const getApiCalendarUserByUserIdIcs = <
	ThrowOnError extends boolean = false,
>(
	options: Options<GetApiCalendarUserByUserIdIcsData, ThrowOnError>,
) => {
	return (options.client ?? client).get<
		GetApiCalendarUserByUserIdIcsResponses,
		GetApiCalendarUserByUserIdIcsErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/api/calendar/user/{userId}.ics",
		...options,
	});
};
