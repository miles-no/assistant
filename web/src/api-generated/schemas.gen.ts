// This file is auto-generated by @hey-api/openapi-ts

export const UserSchema = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
    },
    email: {
      type: 'string',
      format: 'email',
    },
    firstName: {
      type: 'string',
    },
    lastName: {
      type: 'string',
    },
    role: {
      type: 'string',
      enum: ['ADMIN', 'MANAGER', 'USER'],
    },
    createdAt: {
      type: 'string',
      format: 'date-time',
    },
  },
} as const;

export const LocationSchema = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
    },
    name: {
      type: 'string',
    },
    address: {
      type: 'string',
    },
    city: {
      type: 'string',
    },
    country: {
      type: 'string',
    },
    timezone: {
      type: 'string',
      example: 'America/Los_Angeles',
    },
    description: {
      type: 'string',
    },
    createdAt: {
      type: 'string',
      format: 'date-time',
    },
    updatedAt: {
      type: 'string',
      format: 'date-time',
    },
  },
} as const;

export const LocationInputSchema = {
  type: 'object',
  required: ['name', 'address', 'city', 'country'],
  properties: {
    name: {
      type: 'string',
      example: 'Stavanger',
    },
    address: {
      type: 'string',
      example: 'Nytorget 8',
    },
    city: {
      type: 'string',
      example: 'Stavanger',
    },
    country: {
      type: 'string',
      example: 'Norway',
    },
    timezone: {
      type: 'string',
      default: 'UTC',
      example: 'Europe/Oslo',
    },
    description: {
      type: 'string',
      example: 'Miles Stavanger office',
    },
  },
} as const;

export const RoomSchema = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
    },
    name: {
      type: 'string',
    },
    locationId: {
      type: 'string',
    },
    capacity: {
      type: 'integer',
    },
    description: {
      type: 'string',
    },
    amenities: {
      type: 'array',
      items: {
        type: 'string',
      },
      example: ['projector', 'whiteboard', 'video_conference'],
    },
    isActive: {
      type: 'boolean',
    },
    createdAt: {
      type: 'string',
      format: 'date-time',
    },
    updatedAt: {
      type: 'string',
      format: 'date-time',
    },
  },
} as const;

export const RoomInputSchema = {
  type: 'object',
  required: ['name', 'locationId', 'capacity'],
  properties: {
    name: {
      type: 'string',
      example: 'Teamrommet',
    },
    locationId: {
      type: 'string',
      example: 'stavanger',
    },
    capacity: {
      type: 'integer',
      minimum: 1,
      example: 10,
    },
    description: {
      type: 'string',
      example: 'Team collaboration room',
    },
    amenities: {
      type: 'array',
      items: {
        type: 'string',
      },
      default: [],
      example: ['projector', 'whiteboard', 'video_conference', 'tv'],
    },
  },
} as const;

export const BookingSchema = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
    },
    roomId: {
      type: 'string',
    },
    userId: {
      type: 'string',
    },
    startTime: {
      type: 'string',
      format: 'date-time',
    },
    endTime: {
      type: 'string',
      format: 'date-time',
    },
    title: {
      type: 'string',
    },
    description: {
      type: 'string',
    },
    status: {
      type: 'string',
      enum: ['PENDING', 'CONFIRMED', 'CANCELLED'],
    },
    createdAt: {
      type: 'string',
      format: 'date-time',
    },
    updatedAt: {
      type: 'string',
      format: 'date-time',
    },
  },
} as const;

export const BookingInputSchema = {
  type: 'object',
  required: ['roomId', 'startTime', 'endTime', 'title'],
  properties: {
    roomId: {
      type: 'string',
      example: 'stavanger-skagen',
    },
    startTime: {
      type: 'string',
      format: 'date-time',
      example: '2025-10-20T14:00:00Z',
    },
    endTime: {
      type: 'string',
      format: 'date-time',
      example: '2025-10-20T15:30:00Z',
    },
    title: {
      type: 'string',
      example: 'Product Review Meeting',
    },
    description: {
      type: 'string',
      example: 'Monthly product review with stakeholders',
    },
  },
} as const;

export const ErrorSchema = {
  type: 'object',
  properties: {
    error: {
      type: 'string',
    },
  },
} as const;

export const ValidationErrorSchema = {
  type: 'object',
  properties: {
    error: {
      type: 'string',
      example: 'Validation error',
    },
    details: {
      type: 'array',
      items: {
        type: 'object',
        properties: {
          path: {
            type: 'string',
          },
          message: {
            type: 'string',
          },
        },
      },
    },
  },
} as const;
