// This file is auto-generated by @hey-api/openapi-ts

export type ClientOptions = {
	baseUrl: "http://localhost:3000" | "https://api.miles.com" | (string & {});
};

export type User = {
	id?: string;
	email?: string;
	firstName?: string;
	lastName?: string;
	role?: "ADMIN" | "MANAGER" | "USER";
	createdAt?: string;
};

export type Location = {
	id?: string;
	name?: string;
	address?: string;
	city?: string;
	country?: string;
	timezone?: string;
	description?: string;
	createdAt?: string;
	updatedAt?: string;
};

export type LocationInput = {
	name: string;
	address: string;
	city: string;
	country: string;
	timezone?: string;
	description?: string;
};

export type Room = {
	id?: string;
	name?: string;
	locationId?: string;
	capacity?: number;
	description?: string;
	amenities?: Array<string>;
	isActive?: boolean;
	createdAt?: string;
	updatedAt?: string;
};

export type RoomInput = {
	name: string;
	locationId: string;
	capacity: number;
	description?: string;
	amenities?: Array<string>;
};

export type Booking = {
	id?: string;
	roomId?: string;
	userId?: string;
	startTime?: string;
	endTime?: string;
	title?: string;
	description?: string;
	status?: "PENDING" | "CONFIRMED" | "CANCELLED";
	createdAt?: string;
	updatedAt?: string;
};

export type BookingInput = {
	roomId: string;
	startTime: string;
	endTime: string;
	title: string;
	description?: string;
};

export type _Error = {
	error?: string;
};

export type ValidationError = {
	error?: string;
	details?: Array<{
		path?: string;
		message?: string;
	}>;
};

/**
 * Location ID
 */
export type LocationId = string;

/**
 * Room ID
 */
export type RoomId = string;

/**
 * Booking ID
 */
export type BookingId = string;

export type GetHealthData = {
	body?: never;
	path?: never;
	query?: never;
	url: "/health";
};

export type GetHealthResponses = {
	/**
	 * API is healthy
	 */
	200: {
		status?: string;
		timestamp?: string;
	};
};

export type GetHealthResponse = GetHealthResponses[keyof GetHealthResponses];

export type PostApiAuthRegisterData = {
	body: {
		email: string;
		password: string;
		firstName: string;
		lastName: string;
	};
	path?: never;
	query?: never;
	url: "/api/auth/register";
};

export type PostApiAuthRegisterErrors = {
	/**
	 * Validation error
	 */
	400: ValidationError;
};

export type PostApiAuthRegisterError =
	PostApiAuthRegisterErrors[keyof PostApiAuthRegisterErrors];

export type PostApiAuthRegisterResponses = {
	/**
	 * User registered successfully
	 */
	201: {
		message?: string;
		user?: User;
		token?: string;
	};
};

export type PostApiAuthRegisterResponse =
	PostApiAuthRegisterResponses[keyof PostApiAuthRegisterResponses];

export type PostApiAuthLoginData = {
	body: {
		email: string;
		password: string;
	};
	path?: never;
	query?: never;
	url: "/api/auth/login";
};

export type PostApiAuthLoginErrors = {
	/**
	 * Missing or invalid authentication
	 */
	401: _Error;
};

export type PostApiAuthLoginError =
	PostApiAuthLoginErrors[keyof PostApiAuthLoginErrors];

export type PostApiAuthLoginResponses = {
	/**
	 * Login successful
	 */
	200: {
		message?: string;
		user?: User;
		token?: string;
	};
};

export type PostApiAuthLoginResponse =
	PostApiAuthLoginResponses[keyof PostApiAuthLoginResponses];

export type GetApiAuthMeData = {
	body?: never;
	path?: never;
	query?: never;
	url: "/api/auth/me";
};

export type GetApiAuthMeErrors = {
	/**
	 * Missing or invalid authentication
	 */
	401: _Error;
};

export type GetApiAuthMeError = GetApiAuthMeErrors[keyof GetApiAuthMeErrors];

export type GetApiAuthMeResponses = {
	/**
	 * User profile
	 */
	200: {
		user?: User & {
			managedLocations?: Array<{
				id?: string;
				location?: Location;
			}>;
		};
	};
};

export type GetApiAuthMeResponse =
	GetApiAuthMeResponses[keyof GetApiAuthMeResponses];

export type GetApiLocationsData = {
	body?: never;
	path?: never;
	query?: never;
	url: "/api/locations";
};

export type GetApiLocationsResponses = {
	/**
	 * List of locations
	 */
	200: {
		locations?: Array<
			Location & {
				_count?: {
					rooms?: number;
				};
			}
		>;
	};
};

export type GetApiLocationsResponse =
	GetApiLocationsResponses[keyof GetApiLocationsResponses];

export type PostApiLocationsData = {
	body: LocationInput;
	path?: never;
	query?: never;
	url: "/api/locations";
};

export type PostApiLocationsErrors = {
	/**
	 * Missing or invalid authentication
	 */
	401: _Error;
	/**
	 * Insufficient permissions
	 */
	403: _Error;
};

export type PostApiLocationsError =
	PostApiLocationsErrors[keyof PostApiLocationsErrors];

export type PostApiLocationsResponses = {
	/**
	 * Location created successfully
	 */
	201: {
		message?: string;
		location?: Location;
	};
};

export type PostApiLocationsResponse =
	PostApiLocationsResponses[keyof PostApiLocationsResponses];

export type DeleteApiLocationsByIdData = {
	body?: never;
	path: {
		/**
		 * Location ID
		 */
		id: string;
	};
	query?: never;
	url: "/api/locations/{id}";
};

export type DeleteApiLocationsByIdErrors = {
	/**
	 * Missing or invalid authentication
	 */
	401: _Error;
	/**
	 * Insufficient permissions
	 */
	403: _Error;
};

export type DeleteApiLocationsByIdError =
	DeleteApiLocationsByIdErrors[keyof DeleteApiLocationsByIdErrors];

export type DeleteApiLocationsByIdResponses = {
	/**
	 * Location deleted successfully
	 */
	200: {
		message?: string;
	};
};

export type DeleteApiLocationsByIdResponse =
	DeleteApiLocationsByIdResponses[keyof DeleteApiLocationsByIdResponses];

export type GetApiLocationsByIdData = {
	body?: never;
	path: {
		/**
		 * Location ID
		 */
		id: string;
	};
	query?: never;
	url: "/api/locations/{id}";
};

export type GetApiLocationsByIdErrors = {
	/**
	 * Resource not found
	 */
	404: _Error;
};

export type GetApiLocationsByIdError =
	GetApiLocationsByIdErrors[keyof GetApiLocationsByIdErrors];

export type GetApiLocationsByIdResponses = {
	/**
	 * Location details
	 */
	200: {
		location?: Location & {
			rooms?: Array<Room>;
			managers?: Array<{
				user?: User;
			}>;
		};
	};
};

export type GetApiLocationsByIdResponse =
	GetApiLocationsByIdResponses[keyof GetApiLocationsByIdResponses];

export type PatchApiLocationsByIdData = {
	body: LocationInput;
	path: {
		/**
		 * Location ID
		 */
		id: string;
	};
	query?: never;
	url: "/api/locations/{id}";
};

export type PatchApiLocationsByIdErrors = {
	/**
	 * Missing or invalid authentication
	 */
	401: _Error;
	/**
	 * Insufficient permissions
	 */
	403: _Error;
	/**
	 * Resource not found
	 */
	404: _Error;
};

export type PatchApiLocationsByIdError =
	PatchApiLocationsByIdErrors[keyof PatchApiLocationsByIdErrors];

export type PatchApiLocationsByIdResponses = {
	/**
	 * Location updated successfully
	 */
	200: {
		message?: string;
		location?: Location;
	};
};

export type PatchApiLocationsByIdResponse =
	PatchApiLocationsByIdResponses[keyof PatchApiLocationsByIdResponses];

export type PostApiLocationsByIdManagersData = {
	body: {
		userId: string;
	};
	path: {
		/**
		 * Location ID
		 */
		id: string;
	};
	query?: never;
	url: "/api/locations/{id}/managers";
};

export type PostApiLocationsByIdManagersErrors = {
	/**
	 * Missing or invalid authentication
	 */
	401: _Error;
	/**
	 * Insufficient permissions
	 */
	403: _Error;
};

export type PostApiLocationsByIdManagersError =
	PostApiLocationsByIdManagersErrors[keyof PostApiLocationsByIdManagersErrors];

export type PostApiLocationsByIdManagersResponses = {
	/**
	 * Manager assigned successfully
	 */
	201: {
		message?: string;
		managerLocation?: {
			[key: string]: unknown;
		};
	};
};

export type PostApiLocationsByIdManagersResponse =
	PostApiLocationsByIdManagersResponses[keyof PostApiLocationsByIdManagersResponses];

export type DeleteApiLocationsByIdManagersByUserIdData = {
	body?: never;
	path: {
		/**
		 * Location ID
		 */
		id: string;
		userId: string;
	};
	query?: never;
	url: "/api/locations/{id}/managers/{userId}";
};

export type DeleteApiLocationsByIdManagersByUserIdErrors = {
	/**
	 * Missing or invalid authentication
	 */
	401: _Error;
	/**
	 * Insufficient permissions
	 */
	403: _Error;
};

export type DeleteApiLocationsByIdManagersByUserIdError =
	DeleteApiLocationsByIdManagersByUserIdErrors[keyof DeleteApiLocationsByIdManagersByUserIdErrors];

export type DeleteApiLocationsByIdManagersByUserIdResponses = {
	/**
	 * Manager removed successfully
	 */
	200: unknown;
};

export type GetApiRoomsData = {
	body?: never;
	path?: never;
	query?: {
		/**
		 * Filter rooms by location ID
		 */
		locationId?: string;
	};
	url: "/api/rooms";
};

export type GetApiRoomsResponses = {
	/**
	 * List of rooms
	 */
	200: {
		rooms?: Array<
			Room & {
				location?: Location;
				_count?: {
					bookings?: number;
				};
			}
		>;
	};
};

export type GetApiRoomsResponse =
	GetApiRoomsResponses[keyof GetApiRoomsResponses];

export type PostApiRoomsData = {
	body: RoomInput;
	path?: never;
	query?: never;
	url: "/api/rooms";
};

export type PostApiRoomsErrors = {
	/**
	 * Missing or invalid authentication
	 */
	401: _Error;
	/**
	 * Insufficient permissions
	 */
	403: _Error;
};

export type PostApiRoomsError = PostApiRoomsErrors[keyof PostApiRoomsErrors];

export type PostApiRoomsResponses = {
	/**
	 * Room created successfully
	 */
	201: {
		message?: string;
		room?: Room & {
			location?: Location;
		};
	};
};

export type PostApiRoomsResponse =
	PostApiRoomsResponses[keyof PostApiRoomsResponses];

export type DeleteApiRoomsByIdData = {
	body?: never;
	path: {
		/**
		 * Room ID
		 */
		id: string;
	};
	query?: never;
	url: "/api/rooms/{id}";
};

export type DeleteApiRoomsByIdErrors = {
	/**
	 * Missing or invalid authentication
	 */
	401: _Error;
	/**
	 * Insufficient permissions
	 */
	403: _Error;
};

export type DeleteApiRoomsByIdError =
	DeleteApiRoomsByIdErrors[keyof DeleteApiRoomsByIdErrors];

export type DeleteApiRoomsByIdResponses = {
	/**
	 * Room deleted successfully
	 */
	200: unknown;
};

export type GetApiRoomsByIdData = {
	body?: never;
	path: {
		/**
		 * Room ID
		 */
		id: string;
	};
	query?: never;
	url: "/api/rooms/{id}";
};

export type GetApiRoomsByIdErrors = {
	/**
	 * Resource not found
	 */
	404: _Error;
};

export type GetApiRoomsByIdError =
	GetApiRoomsByIdErrors[keyof GetApiRoomsByIdErrors];

export type GetApiRoomsByIdResponses = {
	/**
	 * Room details
	 */
	200: {
		room?: Room & {
			location?: Location;
		};
	};
};

export type GetApiRoomsByIdResponse =
	GetApiRoomsByIdResponses[keyof GetApiRoomsByIdResponses];

export type PatchApiRoomsByIdData = {
	body: {
		name?: string;
		capacity?: number;
		description?: string;
		amenities?: Array<string>;
		isActive?: boolean;
	};
	path: {
		/**
		 * Room ID
		 */
		id: string;
	};
	query?: never;
	url: "/api/rooms/{id}";
};

export type PatchApiRoomsByIdErrors = {
	/**
	 * Missing or invalid authentication
	 */
	401: _Error;
	/**
	 * Insufficient permissions
	 */
	403: _Error;
};

export type PatchApiRoomsByIdError =
	PatchApiRoomsByIdErrors[keyof PatchApiRoomsByIdErrors];

export type PatchApiRoomsByIdResponses = {
	/**
	 * Room updated successfully
	 */
	200: {
		message?: string;
		room?: Room;
	};
};

export type PatchApiRoomsByIdResponse =
	PatchApiRoomsByIdResponses[keyof PatchApiRoomsByIdResponses];

export type GetApiRoomsByIdAvailabilityData = {
	body?: never;
	path: {
		/**
		 * Room ID
		 */
		id: string;
	};
	query: {
		startDate: string;
		endDate: string;
	};
	url: "/api/rooms/{id}/availability";
};

export type GetApiRoomsByIdAvailabilityErrors = {
	/**
	 * Validation error
	 */
	400: ValidationError;
};

export type GetApiRoomsByIdAvailabilityError =
	GetApiRoomsByIdAvailabilityErrors[keyof GetApiRoomsByIdAvailabilityErrors];

export type GetApiRoomsByIdAvailabilityResponses = {
	/**
	 * Room availability
	 */
	200: {
		bookings?: Array<Booking>;
	};
};

export type GetApiRoomsByIdAvailabilityResponse =
	GetApiRoomsByIdAvailabilityResponses[keyof GetApiRoomsByIdAvailabilityResponses];

export type GetApiBookingsData = {
	body?: never;
	path?: never;
	query?: {
		/**
		 * Filter by room ID
		 */
		roomId?: string;
		/**
		 * Filter by location ID
		 */
		locationId?: string;
		/**
		 * Filter bookings starting after this date
		 */
		startDate?: string;
		/**
		 * Filter bookings ending before this date
		 */
		endDate?: string;
	};
	url: "/api/bookings";
};

export type GetApiBookingsErrors = {
	/**
	 * Missing or invalid authentication
	 */
	401: _Error;
};

export type GetApiBookingsError =
	GetApiBookingsErrors[keyof GetApiBookingsErrors];

export type GetApiBookingsResponses = {
	/**
	 * List of bookings
	 */
	200: {
		bookings?: Array<
			Booking & {
				room?: Room & {
					location?: Location;
				};
				user?: User;
			}
		>;
	};
};

export type GetApiBookingsResponse =
	GetApiBookingsResponses[keyof GetApiBookingsResponses];

export type PostApiBookingsData = {
	body: BookingInput;
	path?: never;
	query?: never;
	url: "/api/bookings";
};

export type PostApiBookingsErrors = {
	/**
	 * Validation error
	 */
	400: ValidationError;
	/**
	 * Missing or invalid authentication
	 */
	401: _Error;
	/**
	 * Room not available for the selected time slot
	 */
	409: {
		error?: string;
	};
};

export type PostApiBookingsError =
	PostApiBookingsErrors[keyof PostApiBookingsErrors];

export type PostApiBookingsResponses = {
	/**
	 * Booking created successfully
	 */
	201: {
		message?: string;
		booking?: Booking;
	};
};

export type PostApiBookingsResponse =
	PostApiBookingsResponses[keyof PostApiBookingsResponses];

export type DeleteApiBookingsByIdData = {
	body?: never;
	path: {
		/**
		 * Booking ID
		 */
		id: string;
	};
	query?: never;
	url: "/api/bookings/{id}";
};

export type DeleteApiBookingsByIdErrors = {
	/**
	 * Missing or invalid authentication
	 */
	401: _Error;
	/**
	 * Insufficient permissions
	 */
	403: _Error;
};

export type DeleteApiBookingsByIdError =
	DeleteApiBookingsByIdErrors[keyof DeleteApiBookingsByIdErrors];

export type DeleteApiBookingsByIdResponses = {
	/**
	 * Booking cancelled successfully
	 */
	200: {
		message?: string;
	};
};

export type DeleteApiBookingsByIdResponse =
	DeleteApiBookingsByIdResponses[keyof DeleteApiBookingsByIdResponses];

export type GetApiBookingsByIdData = {
	body?: never;
	path: {
		/**
		 * Booking ID
		 */
		id: string;
	};
	query?: never;
	url: "/api/bookings/{id}";
};

export type GetApiBookingsByIdErrors = {
	/**
	 * Missing or invalid authentication
	 */
	401: _Error;
	/**
	 * Insufficient permissions
	 */
	403: _Error;
	/**
	 * Resource not found
	 */
	404: _Error;
};

export type GetApiBookingsByIdError =
	GetApiBookingsByIdErrors[keyof GetApiBookingsByIdErrors];

export type GetApiBookingsByIdResponses = {
	/**
	 * Booking details
	 */
	200: {
		booking?: Booking;
	};
};

export type GetApiBookingsByIdResponse =
	GetApiBookingsByIdResponses[keyof GetApiBookingsByIdResponses];

export type PatchApiBookingsByIdData = {
	body: {
		startTime?: string;
		endTime?: string;
		title?: string;
		description?: string;
		status?: "PENDING" | "CONFIRMED" | "CANCELLED";
	};
	path: {
		/**
		 * Booking ID
		 */
		id: string;
	};
	query?: never;
	url: "/api/bookings/{id}";
};

export type PatchApiBookingsByIdErrors = {
	/**
	 * Missing or invalid authentication
	 */
	401: _Error;
	/**
	 * Insufficient permissions
	 */
	403: _Error;
	/**
	 * Room not available for the new time slot
	 */
	409: unknown;
};

export type PatchApiBookingsByIdError =
	PatchApiBookingsByIdErrors[keyof PatchApiBookingsByIdErrors];

export type PatchApiBookingsByIdResponses = {
	/**
	 * Booking updated successfully
	 */
	200: {
		message?: string;
		booking?: Booking;
	};
};

export type PatchApiBookingsByIdResponse =
	PatchApiBookingsByIdResponses[keyof PatchApiBookingsByIdResponses];

export type GetApiCalendarOfficeByLocationIdIcsData = {
	body?: never;
	path: {
		/**
		 * Location ID
		 */
		id: string;
	};
	query?: never;
	url: "/api/calendar/office/{locationId}.ics";
};

export type GetApiCalendarOfficeByLocationIdIcsErrors = {
	/**
	 * Missing or invalid authentication
	 */
	401: _Error;
	/**
	 * Resource not found
	 */
	404: _Error;
};

export type GetApiCalendarOfficeByLocationIdIcsError =
	GetApiCalendarOfficeByLocationIdIcsErrors[keyof GetApiCalendarOfficeByLocationIdIcsErrors];

export type GetApiCalendarOfficeByLocationIdIcsResponses = {
	/**
	 * iCal calendar feed
	 */
	200: Blob | File;
};

export type GetApiCalendarOfficeByLocationIdIcsResponse =
	GetApiCalendarOfficeByLocationIdIcsResponses[keyof GetApiCalendarOfficeByLocationIdIcsResponses];

export type GetApiCalendarRoomByRoomIdIcsData = {
	body?: never;
	path: {
		/**
		 * Room ID
		 */
		id: string;
	};
	query?: never;
	url: "/api/calendar/room/{roomId}.ics";
};

export type GetApiCalendarRoomByRoomIdIcsErrors = {
	/**
	 * Missing or invalid authentication
	 */
	401: _Error;
	/**
	 * Resource not found
	 */
	404: _Error;
};

export type GetApiCalendarRoomByRoomIdIcsError =
	GetApiCalendarRoomByRoomIdIcsErrors[keyof GetApiCalendarRoomByRoomIdIcsErrors];

export type GetApiCalendarRoomByRoomIdIcsResponses = {
	/**
	 * iCal calendar feed
	 */
	200: Blob | File;
};

export type GetApiCalendarRoomByRoomIdIcsResponse =
	GetApiCalendarRoomByRoomIdIcsResponses[keyof GetApiCalendarRoomByRoomIdIcsResponses];

export type GetApiCalendarUserByUserIdIcsData = {
	body?: never;
	path: {
		userId: string;
	};
	query?: never;
	url: "/api/calendar/user/{userId}.ics";
};

export type GetApiCalendarUserByUserIdIcsErrors = {
	/**
	 * Missing or invalid authentication
	 */
	401: _Error;
	/**
	 * Insufficient permissions
	 */
	403: _Error;
	/**
	 * Resource not found
	 */
	404: _Error;
};

export type GetApiCalendarUserByUserIdIcsError =
	GetApiCalendarUserByUserIdIcsErrors[keyof GetApiCalendarUserByUserIdIcsErrors];

export type GetApiCalendarUserByUserIdIcsResponses = {
	/**
	 * iCal calendar feed
	 */
	200: Blob | File;
};

export type GetApiCalendarUserByUserIdIcsResponse =
	GetApiCalendarUserByUserIdIcsResponses[keyof GetApiCalendarUserByUserIdIcsResponses];
