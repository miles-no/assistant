// This file is auto-generated by @hey-api/openapi-ts

import { queryOptions, type UseMutationOptions } from '@tanstack/react-query';

import { client } from '../client.gen';
import {
  deleteApiBookingsById,
  deleteApiLocationsById,
  deleteApiLocationsByIdManagersByUserId,
  deleteApiRoomsById,
  getApiAuthMe,
  getApiBookings,
  getApiBookingsById,
  getApiCalendarOfficeByLocationIdIcs,
  getApiCalendarRoomByRoomIdIcs,
  getApiCalendarUserByUserIdIcs,
  getApiLocations,
  getApiLocationsById,
  getApiRooms,
  getApiRoomsById,
  getApiRoomsByIdAvailability,
  getHealth,
  type Options,
  patchApiBookingsById,
  patchApiLocationsById,
  patchApiRoomsById,
  postApiAuthLogin,
  postApiAuthRegister,
  postApiBookings,
  postApiLocations,
  postApiLocationsByIdManagers,
  postApiRooms,
} from '../sdk.gen';
import type {
  DeleteApiBookingsByIdData,
  DeleteApiBookingsByIdError,
  DeleteApiBookingsByIdResponse,
  DeleteApiLocationsByIdData,
  DeleteApiLocationsByIdError,
  DeleteApiLocationsByIdManagersByUserIdData,
  DeleteApiLocationsByIdManagersByUserIdError,
  DeleteApiLocationsByIdResponse,
  DeleteApiRoomsByIdData,
  DeleteApiRoomsByIdError,
  GetApiAuthMeData,
  GetApiBookingsByIdData,
  GetApiBookingsData,
  GetApiCalendarOfficeByLocationIdIcsData,
  GetApiCalendarRoomByRoomIdIcsData,
  GetApiCalendarUserByUserIdIcsData,
  GetApiLocationsByIdData,
  GetApiLocationsData,
  GetApiRoomsByIdAvailabilityData,
  GetApiRoomsByIdData,
  GetApiRoomsData,
  GetHealthData,
  PatchApiBookingsByIdData,
  PatchApiBookingsByIdError,
  PatchApiBookingsByIdResponse,
  PatchApiLocationsByIdData,
  PatchApiLocationsByIdError,
  PatchApiLocationsByIdResponse,
  PatchApiRoomsByIdData,
  PatchApiRoomsByIdError,
  PatchApiRoomsByIdResponse,
  PostApiAuthLoginData,
  PostApiAuthLoginError,
  PostApiAuthLoginResponse,
  PostApiAuthRegisterData,
  PostApiAuthRegisterError,
  PostApiAuthRegisterResponse,
  PostApiBookingsData,
  PostApiBookingsError,
  PostApiBookingsResponse,
  PostApiLocationsByIdManagersData,
  PostApiLocationsByIdManagersError,
  PostApiLocationsByIdManagersResponse,
  PostApiLocationsData,
  PostApiLocationsError,
  PostApiLocationsResponse,
  PostApiRoomsData,
  PostApiRoomsError,
  PostApiRoomsResponse,
} from '../types.gen';

export type QueryKey<TOptions extends Options> = [
  Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
    _id: string;
    _infinite?: boolean;
    tags?: ReadonlyArray<string>;
  },
];

const createQueryKey = <TOptions extends Options>(
  id: string,
  options?: TOptions,
  infinite?: boolean,
  tags?: ReadonlyArray<string>
): [QueryKey<TOptions>[0]] => {
  const params: QueryKey<TOptions>[0] = {
    _id: id,
    baseUrl: options?.baseUrl || (options?.client ?? client).getConfig().baseUrl,
  } as QueryKey<TOptions>[0];
  if (infinite) {
    params._infinite = infinite;
  }
  if (tags) {
    params.tags = tags;
  }
  if (options?.body) {
    params.body = options.body;
  }
  if (options?.headers) {
    params.headers = options.headers;
  }
  if (options?.path) {
    params.path = options.path;
  }
  if (options?.query) {
    params.query = options.query;
  }
  return [params];
};

export const getHealthQueryKey = (options?: Options<GetHealthData>) =>
  createQueryKey('getHealth', options);

/**
 * Health check
 *
 * Check if the API is running
 */
export const getHealthOptions = (options?: Options<GetHealthData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getHealth({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getHealthQueryKey(options),
  });
};

/**
 * Register a new user
 *
 * Create a new user account. New users are assigned the USER role by default.
 */
export const postApiAuthRegisterMutation = (
  options?: Partial<Options<PostApiAuthRegisterData>>
): UseMutationOptions<
  PostApiAuthRegisterResponse,
  PostApiAuthRegisterError,
  Options<PostApiAuthRegisterData>
> => {
  const mutationOptions: UseMutationOptions<
    PostApiAuthRegisterResponse,
    PostApiAuthRegisterError,
    Options<PostApiAuthRegisterData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await postApiAuthRegister({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

/**
 * Login
 *
 * Authenticate and receive a JWT token
 */
export const postApiAuthLoginMutation = (
  options?: Partial<Options<PostApiAuthLoginData>>
): UseMutationOptions<
  PostApiAuthLoginResponse,
  PostApiAuthLoginError,
  Options<PostApiAuthLoginData>
> => {
  const mutationOptions: UseMutationOptions<
    PostApiAuthLoginResponse,
    PostApiAuthLoginError,
    Options<PostApiAuthLoginData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await postApiAuthLogin({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiAuthMeQueryKey = (options?: Options<GetApiAuthMeData>) =>
  createQueryKey('getApiAuthMe', options);

/**
 * Get current user
 *
 * Get the authenticated user's profile information
 */
export const getApiAuthMeOptions = (options?: Options<GetApiAuthMeData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiAuthMe({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiAuthMeQueryKey(options),
  });
};

export const getApiLocationsQueryKey = (options?: Options<GetApiLocationsData>) =>
  createQueryKey('getApiLocations', options);

/**
 * List all locations
 *
 * Get a list of all office locations
 */
export const getApiLocationsOptions = (options?: Options<GetApiLocationsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiLocations({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiLocationsQueryKey(options),
  });
};

/**
 * Create a location
 *
 * Create a new office location (Admin only)
 */
export const postApiLocationsMutation = (
  options?: Partial<Options<PostApiLocationsData>>
): UseMutationOptions<
  PostApiLocationsResponse,
  PostApiLocationsError,
  Options<PostApiLocationsData>
> => {
  const mutationOptions: UseMutationOptions<
    PostApiLocationsResponse,
    PostApiLocationsError,
    Options<PostApiLocationsData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await postApiLocations({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

/**
 * Delete location
 *
 * Delete a location (Admin only)
 */
export const deleteApiLocationsByIdMutation = (
  options?: Partial<Options<DeleteApiLocationsByIdData>>
): UseMutationOptions<
  DeleteApiLocationsByIdResponse,
  DeleteApiLocationsByIdError,
  Options<DeleteApiLocationsByIdData>
> => {
  const mutationOptions: UseMutationOptions<
    DeleteApiLocationsByIdResponse,
    DeleteApiLocationsByIdError,
    Options<DeleteApiLocationsByIdData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await deleteApiLocationsById({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiLocationsByIdQueryKey = (options: Options<GetApiLocationsByIdData>) =>
  createQueryKey('getApiLocationsById', options);

/**
 * Get location by ID
 *
 * Get details of a specific location including rooms and managers
 */
export const getApiLocationsByIdOptions = (options: Options<GetApiLocationsByIdData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiLocationsById({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiLocationsByIdQueryKey(options),
  });
};

/**
 * Update location
 *
 * Update a location (Admin or Manager of that location)
 */
export const patchApiLocationsByIdMutation = (
  options?: Partial<Options<PatchApiLocationsByIdData>>
): UseMutationOptions<
  PatchApiLocationsByIdResponse,
  PatchApiLocationsByIdError,
  Options<PatchApiLocationsByIdData>
> => {
  const mutationOptions: UseMutationOptions<
    PatchApiLocationsByIdResponse,
    PatchApiLocationsByIdError,
    Options<PatchApiLocationsByIdData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await patchApiLocationsById({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

/**
 * Assign manager to location
 *
 * Assign a manager to a location (Admin only)
 */
export const postApiLocationsByIdManagersMutation = (
  options?: Partial<Options<PostApiLocationsByIdManagersData>>
): UseMutationOptions<
  PostApiLocationsByIdManagersResponse,
  PostApiLocationsByIdManagersError,
  Options<PostApiLocationsByIdManagersData>
> => {
  const mutationOptions: UseMutationOptions<
    PostApiLocationsByIdManagersResponse,
    PostApiLocationsByIdManagersError,
    Options<PostApiLocationsByIdManagersData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await postApiLocationsByIdManagers({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

/**
 * Remove manager from location
 *
 * Remove a manager from a location (Admin only)
 */
export const deleteApiLocationsByIdManagersByUserIdMutation = (
  options?: Partial<Options<DeleteApiLocationsByIdManagersByUserIdData>>
): UseMutationOptions<
  unknown,
  DeleteApiLocationsByIdManagersByUserIdError,
  Options<DeleteApiLocationsByIdManagersByUserIdData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DeleteApiLocationsByIdManagersByUserIdError,
    Options<DeleteApiLocationsByIdManagersByUserIdData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await deleteApiLocationsByIdManagersByUserId({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiRoomsQueryKey = (options?: Options<GetApiRoomsData>) =>
  createQueryKey('getApiRooms', options);

/**
 * List all rooms
 *
 * Get a list of all rooms, optionally filtered by location
 */
export const getApiRoomsOptions = (options?: Options<GetApiRoomsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiRooms({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiRoomsQueryKey(options),
  });
};

/**
 * Create a room
 *
 * Create a new room (Admin or Manager of that location)
 */
export const postApiRoomsMutation = (
  options?: Partial<Options<PostApiRoomsData>>
): UseMutationOptions<PostApiRoomsResponse, PostApiRoomsError, Options<PostApiRoomsData>> => {
  const mutationOptions: UseMutationOptions<
    PostApiRoomsResponse,
    PostApiRoomsError,
    Options<PostApiRoomsData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await postApiRooms({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

/**
 * Delete room
 *
 * Delete a room (Admin or Manager of that location)
 */
export const deleteApiRoomsByIdMutation = (
  options?: Partial<Options<DeleteApiRoomsByIdData>>
): UseMutationOptions<unknown, DeleteApiRoomsByIdError, Options<DeleteApiRoomsByIdData>> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DeleteApiRoomsByIdError,
    Options<DeleteApiRoomsByIdData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await deleteApiRoomsById({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiRoomsByIdQueryKey = (options: Options<GetApiRoomsByIdData>) =>
  createQueryKey('getApiRoomsById', options);

/**
 * Get room by ID
 *
 * Get details of a specific room
 */
export const getApiRoomsByIdOptions = (options: Options<GetApiRoomsByIdData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiRoomsById({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiRoomsByIdQueryKey(options),
  });
};

/**
 * Update room
 *
 * Update a room (Admin or Manager of that location)
 */
export const patchApiRoomsByIdMutation = (
  options?: Partial<Options<PatchApiRoomsByIdData>>
): UseMutationOptions<
  PatchApiRoomsByIdResponse,
  PatchApiRoomsByIdError,
  Options<PatchApiRoomsByIdData>
> => {
  const mutationOptions: UseMutationOptions<
    PatchApiRoomsByIdResponse,
    PatchApiRoomsByIdError,
    Options<PatchApiRoomsByIdData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await patchApiRoomsById({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiRoomsByIdAvailabilityQueryKey = (
  options: Options<GetApiRoomsByIdAvailabilityData>
) => createQueryKey('getApiRoomsByIdAvailability', options);

/**
 * Check room availability
 *
 * Get all bookings for a room within a date range
 */
export const getApiRoomsByIdAvailabilityOptions = (
  options: Options<GetApiRoomsByIdAvailabilityData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiRoomsByIdAvailability({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiRoomsByIdAvailabilityQueryKey(options),
  });
};

export const getApiBookingsQueryKey = (options?: Options<GetApiBookingsData>) =>
  createQueryKey('getApiBookings', options);

/**
 * List bookings
 *
 * Get bookings filtered by user role:
 * - **USER**: Only their own bookings
 * - **MANAGER**: Bookings in their managed locations
 * - **ADMIN**: All bookings
 *
 */
export const getApiBookingsOptions = (options?: Options<GetApiBookingsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiBookings({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiBookingsQueryKey(options),
  });
};

/**
 * Create a booking
 *
 * Create a new room booking
 */
export const postApiBookingsMutation = (
  options?: Partial<Options<PostApiBookingsData>>
): UseMutationOptions<
  PostApiBookingsResponse,
  PostApiBookingsError,
  Options<PostApiBookingsData>
> => {
  const mutationOptions: UseMutationOptions<
    PostApiBookingsResponse,
    PostApiBookingsError,
    Options<PostApiBookingsData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await postApiBookings({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

/**
 * Cancel booking
 *
 * Cancel a booking (owner, manager of that location, or admin)
 */
export const deleteApiBookingsByIdMutation = (
  options?: Partial<Options<DeleteApiBookingsByIdData>>
): UseMutationOptions<
  DeleteApiBookingsByIdResponse,
  DeleteApiBookingsByIdError,
  Options<DeleteApiBookingsByIdData>
> => {
  const mutationOptions: UseMutationOptions<
    DeleteApiBookingsByIdResponse,
    DeleteApiBookingsByIdError,
    Options<DeleteApiBookingsByIdData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await deleteApiBookingsById({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiBookingsByIdQueryKey = (options: Options<GetApiBookingsByIdData>) =>
  createQueryKey('getApiBookingsById', options);

/**
 * Get booking by ID
 *
 * Get details of a specific booking
 */
export const getApiBookingsByIdOptions = (options: Options<GetApiBookingsByIdData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiBookingsById({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiBookingsByIdQueryKey(options),
  });
};

/**
 * Update booking
 *
 * Update a booking (owner, manager of that location, or admin)
 */
export const patchApiBookingsByIdMutation = (
  options?: Partial<Options<PatchApiBookingsByIdData>>
): UseMutationOptions<
  PatchApiBookingsByIdResponse,
  PatchApiBookingsByIdError,
  Options<PatchApiBookingsByIdData>
> => {
  const mutationOptions: UseMutationOptions<
    PatchApiBookingsByIdResponse,
    PatchApiBookingsByIdError,
    Options<PatchApiBookingsByIdData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await patchApiBookingsById({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiCalendarOfficeByLocationIdIcsQueryKey = (
  options: Options<GetApiCalendarOfficeByLocationIdIcsData>
) => createQueryKey('getApiCalendarOfficeByLocationIdIcs', options);

/**
 * Get office calendar feed
 *
 * Download iCal calendar feed for all bookings in an office
 */
export const getApiCalendarOfficeByLocationIdIcsOptions = (
  options: Options<GetApiCalendarOfficeByLocationIdIcsData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiCalendarOfficeByLocationIdIcs({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiCalendarOfficeByLocationIdIcsQueryKey(options),
  });
};

export const getApiCalendarRoomByRoomIdIcsQueryKey = (
  options: Options<GetApiCalendarRoomByRoomIdIcsData>
) => createQueryKey('getApiCalendarRoomByRoomIdIcs', options);

/**
 * Get room calendar feed
 *
 * Download iCal calendar feed for a specific room
 */
export const getApiCalendarRoomByRoomIdIcsOptions = (
  options: Options<GetApiCalendarRoomByRoomIdIcsData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiCalendarRoomByRoomIdIcs({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiCalendarRoomByRoomIdIcsQueryKey(options),
  });
};

export const getApiCalendarUserByUserIdIcsQueryKey = (
  options: Options<GetApiCalendarUserByUserIdIcsData>
) => createQueryKey('getApiCalendarUserByUserIdIcs', options);

/**
 * Get user calendar feed
 *
 * Download iCal calendar feed for a user's bookings
 */
export const getApiCalendarUserByUserIdIcsOptions = (
  options: Options<GetApiCalendarUserByUserIdIcsData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiCalendarUserByUserIdIcs({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiCalendarUserByUserIdIcsQueryKey(options),
  });
};
